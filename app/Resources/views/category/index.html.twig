{% extends 'base.html.twig' %}
{% block stylesheets %}
    <style>
        .inactive {
            display: none;
        }

        .category-tree-item {
            position: relative;
            padding-top: 2px;
            padding-bottom: 2px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .category-tree-list {
            margin: 0;
            padding-left: 20px;
            list-style: none;
        }

        .category-tree-item-control-closed::after {
            position: absolute;
            width: 16px;
            height: 16px;
            left: -20px;
            top: 4px;
            background: url('img/arrow-right.png');
            content: '';
        }

        .category-tree-item-control-opened::after {
            position: absolute;
            width: 16px;
            height: 16px;
            left: -20px;
            top: 4px;
            background: url('img/arrow-down.png');
            content: '';
        }


    </style>
{% endblock %}
{% block body %}
    <h1>Categories list</h1>

    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for category in categories %}
            <tr>
                <td><a href="{{ path('category_show', { 'id': category.id }) }}">{{ category.id }}</a></td>
                <td>{{ category.title }}</td>
                <td>
                    <ul>
                        <li>
                            <a href="{{ path('category_show', { 'id': category.id }) }}">show</a>
                        </li>
                        <li>
                            <a href="{{ path('category_edit', { 'id': category.id }) }}">edit</a>
                        </li>
                    </ul>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <ul>
        <li>
            <a href="{{ path('category_new') }}">Create a new category</a>
        </li>
    </ul>

    <script>

        $.fn.ajaxgrid = function(options) {
            var categoryTree;

            initializeBaseElements();
            document.body.appendChild(categoryTree);

            buildCategoryTree(null, categoryTree);



            function applyOptions(options) {
                if (!options.dataURL) {
                    throw 'Wrong "dataUrl" exception';
                }
                if (!options.editUrl) {
                    throw 'Wrong "editUrl" exception';
                }
                if (!options.sortableColumns) {
                    options.sortableColumns = [];
                }
                if (!options.filterableColumns) {
                    options.filterableColumns = [];
                }
                if (!options.rowsPerPage) {
                    options.rowsPerPage = 5;
                }
            }

            function initializeBaseElements() {
                categoryTree = document.createElement('div');
                categoryTree.classList.add('category-tree');
            }

            function buildCategoryTree(categoryId, parent) {
                $.getJSON('catalog/ajax/category/'+categoryId, function(JSON_Data) {
                    var listItemStyle = 'category-tree-item category-tree-item-control-closed';
                    var listStyle = 'category-tree-list';

                    var categoryList = document.createElement('ul');
                    categoryList.setAttribute('class', listStyle);

                    $.each(JSON_Data, function(index, element) {


                        var checkbox = createCheckbox();
                        checkbox.setAttribute('category_id', element.id);

                        var categoryListItem = createLi();

                        if (element.children === false) {
                            listItemStyle = '';
                            listStyle = '';
                            categoryListItem.setAttribute('childs', 'false');
                        } else {
                            listItemStyle = 'category-tree-item category-tree-item-control-closed';
                            listStyle = 'category-tree-list';
                            categoryListItem.setAttribute('childs', 'true');
                        }

                        categoryListItem.setAttribute('category_id', element.id);
                        categoryListItem.setAttribute('class', listItemStyle);

                        if ((parent.tagName === 'LI') && (parent.firstChild).checked) {
                            checkbox.setAttribute('checked', 'checked');
                        }

                        categoryListItem.appendChild(checkbox);
                        categoryListItem.innerHTML += element.title;
                        categoryList.appendChild(categoryListItem);
                        checkboxClick(categoryListItem);

                        addOnClick(categoryListItem);

                    });
                    parent.appendChild(categoryList);
                })
            }

            function createLi() {
                var li = document.createElement('li');
                li.setAttribute('expanded', 'false');
                li.setAttribute('downloaded', 'false');
                return li;
            }
            function createCheckbox() {
                var checkbox = document.createElement('input');
                checkbox.setAttribute('type', 'checkbox');
                checkbox.setAttribute('class', 'tree-checkbox');
                return checkbox;
            }

            function addOnClick(element) {
                element.onclick = function (event) {
                    event.stopPropagation();
                    var target = event.target;
                    var expand = target.getAttribute('expanded');
                    var download = target.getAttribute('downloaded');
                    if (target.getAttribute('childs') === 'false') {
                        return;
                    }
                    if (expand === 'false' && download === 'false') {
                        target.setAttribute('expanded', 'true');
                        target.setAttribute('downloaded', 'true');
                        buildCategoryTree(target.getAttribute('category_id'), event.target);
                        target.classList.remove('category-tree-item-control-closed');
                        target.classList.add('category-tree-item-control-opened');
                    } else if (expand === 'true' && download === 'true') {
                        target.setAttribute('expanded', 'false');
                        (target.getElementsByTagName('ul')[0]).classList.add('inactive');
                        target.classList.add('category-tree-item-control-closed');
                        target.classList.remove('category-tree-item-control-opened');
                    } else if (expand === 'false' && download === 'true') {
                        target.setAttribute('expanded', 'true');
                        (target.getElementsByTagName('ul')[0]).classList.remove('inactive');
                        target.classList.remove('category-tree-item-control-closed');
                        target.classList.add('category-tree-item-control-opened');
                    }
                }
            }

            function checkboxClick(element) {
                var parentCheckbox = element.firstChild;
                (element.firstChild).onclick = function (event) {
                    var checkboxes = element.getElementsByClassName('tree-checkbox');
                    for (var i = 1; i < checkboxes.length; i++) {
                        if (!parentCheckbox.checked) {
                            checkboxes[i].checked = 0;
                        } else {
                            checkboxes[i].checked = !0;
                        }
                    }

                }
            }

        }

        $("#plg").ajaxgrid();




    </script>
    {% endblock body %}